
#!/bin/bash

sudo apt update && sudo apt upgrade -y &&
sudo apt-get install -y g++ freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libglu1-mesa libglu1-mesa-dev
sudo update-pciids

#### ubuntu 20.04 setup #####
## cmake, python, coded, gtk ##
sudo apt-get install -y build-essential cmake unzip pkg-config && sudo apt-get install -y libxmu-dev libxi-dev libglu1-mesa libglu1-mesa-dev && sudo apt-get install -y libjpeg-dev libpng-dev libtiff-dev && sudo apt-get install -y libavcodec-dev libavformat-dev libswscale-dev libv4l-dev && sudo apt-get install -y libxvidcore-dev libx264-dev && sudo apt-get install -y libgtk-3-dev && sudo apt-get install -y meld imagej nomacs nemo 

sudo apt-get install -y libopenblas-dev libatlas-base-dev liblapack-dev gfortran
sudo apt-get install -y libhdf5-serial-dev graphviz
sudo apt-get install -y python3-dev python3-tk python-imaging-tk
sudo apt-get install -y linux-image-generic linux-image-extra-virtual
sudo apt-get install -y linux-source linux-headers-generic
sudo apt-get install -y openssh-client
sudo apt-get install -y openssh-server
sudo apt-get install -y apt-file
sudo apt-get update
sudo apt-get upgrade -y


# Python versions
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt-get install -y python 3.7
sudo apt-get install -y python 3.8
sudo apt-get install -y python 3.9s
# to activate: python3.x

sudo apt-get install -y git
sudo apt-get install -y python3-pip
sudo apt-get install -y virtualenv

# Anaconda
sudo apt-get install -y libgl1-mesa-glx libegl1-mesa libxrandr2 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6
sudo apt-get install -y curl
curl -O https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh #copy latest version
sudo mkdir /opt/anaconda
sudo chmod ugo+w /opt/anaconda
sudo bash Anaconda3-2021.11-Linux-x86_64.sh # specify installation path: /opt/anaconda/anaconda3
sudo rm -f Anaconda3-2021.11-Linux-x86_64.sh
sudo ln -s /opt/anaconda/anaconda3/bin/conda /usr/local/bin/conda # make available for all users
conda config --set auto_activate_base False
sudo conda update conda

# Nvidia Container Toolkit
distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
   && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \
   && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
curl -s -L https://nvidia.github.io/nvidia-container-runtime/experimental/$distribution/nvidia-container-runtime.list | sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list
sudo apt-get update
sudo apt-get install -y nvidia-docker2
sudo systemctl restart docker


wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo apt install -y ./google-chrome-stable_current_amd64.deb # follow this afterwards: https://dev.to/rahedmir/how-to-fix-google-chrome-chromium-asks-for-password-to-unlock-keyring-in-linux-1dl0
rm -f google-chrome-stable_current_amd64.deb

sudo snap install pycharm-community --classic
sudo snap install pycharm-professional --classic

wget https://www.scootersoftware.com/bcompare-4.4.1.26165_amd64.deb
sudo apt-get update
sudo apt-get install ./bcompare-4.4.1.26165_amd64.deb
rm -f bcompare-4.4.1.26165_amd64.deb

sudo add-apt-repository -y ppa:easymodo/qimgv
sudo apt-get update
sudo apt install qimgv

# powershell
sudo apt-get update
sudo apt-get install -y wget apt-transport-https software-properties-common
wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
# Register the Microsoft repository GPG keys
sudo dpkg -i packages-microsoft-prod.deb
# Update the list of packages after we added packages.microsoft.com
sudo apt-get update
# Install PowerShell
sudo apt-get install -y powershell
sudo rm -f packages-microsoft-prod.deb

sudo apt-get update
sudo apt-get upgrade -y

##### ubuntu 20.04 setup #####
## cmake, python, coded, gtk ##
sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get install -y build-essential cmake unzip pkg-config
sudo apt-get install -y libxmu-dev libxi-dev libglu1-mesa libglu1-mesa-dev
sudo apt-get install -y libjpeg-dev libpng-dev libtiff-dev
sudo apt-get install -y libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
sudo apt-get install -y libxvidcore-dev libx264-dev
sudo apt-get install -y libgtk-3-dev
sudo apt-get install -y libopenblas-dev libatlas-base-dev liblapack-dev gfortran
sudo apt-get install -y libhdf5-serial-dev graphviz
sudo apt-get install -y python3-dev python3-tk python-imaging-tk
sudo apt-get install -y linux-image-generic linux-image-extra-virtual
sudo apt-get install -y linux-source linux-headers-generic
sudo apt-get install -y openssh-client
sudo apt-get install -y openssh-server
sudo apt-get install -y apt-file
sudo apt-get update
sudo apt-get upgrade -y

# install other import packages
sudo apt-get install -y g++ freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libglu1-mesa libglu1-mesa-dev
sudo update-pciids

# install Nvidia driver

#remove previous drivers
sudo apt-get remove --purge '^nvidia-.*'
# first get the PPA repository driver
sudo add-apt-repository ppa:graphics-drivers/ppa
sudo apt-get update
# install latest driver matching to GPU (replace xxx with version)
sudo apt-get install nvidia-driver-xxx # reboot afterwards, https://www.nvidia.com/en-us/geforce/drivers/


# Python versions
sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt-get install -y python 3.7
sudo apt-get install -y python 3.8
sudo apt-get install -y python 3.9s
# to activate: python3.x

sudo apt-get install -y git
sudo apt-get install -y python3-pip
sudo apt-get install -y virtualenv

# Anaconda
sudo apt-get install -y libgl1-mesa-glx libegl1-mesa libxrandr2 libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6
sudo apt-get install -y curl
curl -O https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh #copy latest version
sudo mkdir /opt/anaconda
sudo chmod ugo+w /opt/anaconda
sudo bash Anaconda3-2021.11-Linux-x86_64.sh # specify installation path: /opt/anaconda/anaconda3
sudo rm -f Anaconda3-2021.11-Linux-x86_64.sh
sudo ln -s /opt/anaconda/anaconda3/bin/conda /usr/local/bin/conda # make available for all users
conda config --set auto_activate_base False
sudo conda update conda

# Docker
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
sudo apt install -y docker-ce
sudo chown $USER:docker /var/run/docker.sock

# Nvidia Container Toolkit
distribution=$(. /etc/os-release;echo $ID$VERSION_ID) \
   && curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add - \
   && curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
curl -s -L https://nvidia.github.io/nvidia-container-runtime/experimental/$distribution/nvidia-container-runtime.list | sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list
sudo apt-get update
sudo apt-get install -y nvidia-docker2
sudo systemctl restart docker

# programs
sudo apt-get install -y meld
sudo apt-get install -y imagej
sudo apt-get install -y nemo nomacs

wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo apt install -y ./google-chrome-stable_current_amd64.deb # follow this afterwards: https://dev.to/rahedmir/how-to-fix-google-chrome-chromium-asks-for-password-to-unlock-keyring-in-linux-1dl0
rm -f google-chrome-stable_current_amd64.deb

sudo snap install pycharm-community --classic
sudo snap install pycharm-professional --classic

wget https://www.scootersoftware.com/bcompare-4.4.1.26165_amd64.deb
sudo apt-get update
sudo apt-get install ./bcompare-4.4.1.26165_amd64.deb
rm -f bcompare-4.4.1.26165_amd64.deb

sudo add-apt-repository -y ppa:easymodo/qimgv
sudo apt-get update
sudo apt install qimgv

# powershell
sudo apt-get update
sudo apt-get install -y wget apt-transport-https software-properties-common
wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
# Register the Microsoft repository GPG keys
sudo dpkg -i packages-microsoft-prod.deb
# Update the list of packages after we added packages.microsoft.com
sudo apt-get update
# Install PowerShell
sudo apt-get install -y powershell
sudo rm -f packages-microsoft-prod.deb

sudo apt-get update
sudo apt-get upgrade -y
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Installing NVIDIA GRID Drivers on Ubuntu

Before installing the PCoIP Graphics Agent, you must install the correct NVIDIA drivers for your system. For current version information, see Linux System Requirements.

    Install tools required to install the NVIDIA drivers:

    $ sudo apt install build-essential

    Disable the Nouveau video driver (two commands):

    $ echo 'blacklist nouveau' | sudo tee -a /etc/modprobe.d/blacklist.conf

    $ sudo reboot

    Install the NVIDIA driver:

    $ sudo ./NVIDIA-Linux-x86_64-xxx.xx-grid.run

    Where xxx.xx is the NVIDIA driver version shown in Linux System Requirements.

    Respond to the installer prompts as follows:
        Accept the EULA
        Say no to installing 32-bit binaries
        Say no to modifying the x.org file

    Verify the NVIDIA installation:

    nvidia-smi

    If the installation was successful, you will see your video card in the response.
